knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
library("dplyr") #Used for working with data frames
library("lubridate") #Used for time-date conversions
library("readr") #Used to read the CSV file
library("ggplot2")
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-27-2024")
source_description <- ("Prince Edward Island Oyster Monitoring and Government")
site_name <- ("CN3") #Use site code with site number based on lat position and state
collection_type <- ("intermittent")
#The file we will be working with is from Prince Edward Island, Canada. The ID_Site for this site is CN3.
raw_CN3_sal <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN3-raw_sal.csv")
raw_CN3_temp <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN3-raw_temp.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_CN3_sal)
spec(raw_CN3_temp)
View(raw_CN3_sal)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN3_sal$datetime <- as.POSIXct(raw_CN3_sal$`Sample Date`, "%m/%d/%Y %H:%M:%S %p", tz = "")
View(raw_CN3_temp)
raw_CN3_temp$datetime <- as.POSIXct(raw_CN3_temp$TIMESTAMP, "%m/%d/%Y %H:%M", tz = "")
raw_CN3_temp$datetime <- as.POSIXct(raw_CN3_temp$reading_datetime, "%m/%d/%Y %H:%M", tz = "")
raw_CN3_temp <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN3-raw_temp.csv")
View(raw_CN3_temp)
raw_CN3_temp$datetime <- as.POSIXct(raw_CN3_temp$reading_datetime, "%m/%d/%y %H:%M %p", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_CN3_sal)
head(raw_CN3_temp)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_CN3_sal <- raw_CN3_sal %>% rename("salinity" = "Value")
raw_CN3_temp <- raw_CN3_temp  %>% rename("temp" = "reading_value")
#Store variables that we will include in the final data frame
lat <- 46.1257
lon <- -62.9055
finalyear <- 2022
firstyear <- 1986
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_CN3_sal <- raw_CN3_sal %>%
filter(between(salinity, 0, 42))
filtered_CN3_temp <- raw_CN3_temp %>%
filter(between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_CN3_sal$salinity))
print(summary(filtered_CN3_temp$temp))
#Store our data into a variable name with just the site name.
CN3_temp <- filtered_CN3_temp
CN3_sal <- filtered_CN3_sal
# we have NAs in the our salinity data frame in the datetime column - need to remove these
count.nas_sal <- is.na(CN3_sal$datetime) # store our NAs in a variable
summary(count.nas_sal) # we have 12 NAs that are stored as "TRUE" in our count.nas
# check if we have NAs in our temperature datetime column - need to remove these
count.nas_temp <- is.na(CN3_temp$datetime) # store our NAs in a variable
summary(count.nas_temp) # we have 6 NAs that are stored as "TRUE" in our count.nas
salplot <- ggplot(CN3_sal, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,40) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for CN3 - Prince Edward Island, Canada") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(CN3_temp, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for CN3 - Prince Edward Island, Canada") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
CN3_envrmonth_sal <- CN3_sal %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
CN3_envrmonth_temp <- CN3_temp %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(CN3_envrmonth_sal)
print(CN3_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
CN3_envryear_sal <- CN3_sal %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
CN3_envryear_temp <- CN3_temp %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(CN3_envryear_sal)
print(CN3_envryear_temp)
timeplot <- ggplot(CN3_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for CN3 - Prince Edward Island, Canada") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(CN3_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for CN3 - Prince Edward Island, Canada") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(CN3_temp$temp)
Mean_max_temperature_C <- mean(CN3_envryear_temp$max_temp)
Mean_min_temperature_C <- mean(CN3_envryear_temp$min_temp)
Temperature_st_dev <- sd(CN3_temp$temp)
Temperature_n <- nrow(CN3_temp)
Temperature_years <- nrow(CN3_envryear_temp)
#Create a data frame to store the temperature results
CN3_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(CN3_temp)
# Write to the combined file with all sites
write.table(CN3_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(CN3_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/CN3_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(CN3_sal$salinity)
Mean_max_Salinity_ppt <- mean(CN3_envryear_sal$max_salinity)
Mean_min_Salinity_ppt <- mean(CN3_envryear_sal$min_salinity)
Salinity_st_dev <- sd(CN3_sal$salinity)
Salinity_n <- nrow(CN3_sal)
Salinity_years <- nrow(CN3_envryear_sal)
#Create a data frame to store the temperature results
CN3_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(CN3_salinity)
# Write to the combined file with all sites
write.table(CN3_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(CN3_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/CN3_salinity.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
library("dplyr") #Used for working with data frames
library("lubridate") #Used for time-date conversions
library("readr") #Used to read the CSV file
library("ggplot2")
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-27-2024")
source_description <- ("Water Data For Texas")
site_name <- ("LA1") #Use site code with site number based on lat position and state
collection_type <- ("continuous")
#The file we will be working with is from Lake Fortuna, Louisiana. The ID_Site for this site is LA1.
raw_LA1_sal <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/LA1-raw_sal.csv")
raw_LA1_temp <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/LA1-raw_temp.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_LA1_sal)
spec(raw_LA1_temp)
View(raw_LA1_sal)
raw_LA1_temp <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/LA1-raw_temp.csv")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_LA1_sal$datetime <- as.POSIXct(raw_LA1_sal$TIMESTAMP, "%m/%d/%Y %H:%M:%S", tz = "")
#The file we will be working with is from Lake Fortuna, Louisiana. The ID_Site for this site is LA1.
raw_LA1_sal <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/LA1-raw_sal.csv")
raw_LA1_temp <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/LA1-raw_temp.csv")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_LA1_sal$datetime <- as.POSIXct(raw_LA1_sal$combined, "%m/%d/%Y %H:%M:%S", tz = "")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_LA1_sal$datetime <- as.POSIXct(raw_LA1_sal$combined, "%m/%d/%Y %H:%M", tz = "")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_LA1_sal$datetime <- as.POSIXct(raw_LA1_sal$combined, "%m/%d/%y %H:%M", tz = "")
View(raw_LA1_temp)
raw_LA1_temp$datetime <- as.POSIXct(raw_LA1_temp$combined, "%m/%d/%y %H:%MS", tz = "")
raw_LA1_temp$datetime <- as.POSIXct(raw_LA1_temp$combined, "%m/%d/%y %H:%M", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_LA1_sal)
head(raw_LA1_temp)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_LA1_sal <- raw_LA1_sal %>% rename("salinity" = "PSU")
raw_LA1_temp <- raw_LA1_temp  %>% rename("temp" = "value")
firstyear <- 2008
finalyear <- 2022
#The file we will be working with is from Lake Fortuna, Louisiana. The ID_Site for this site is LA1.
raw_LA1_sal <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/LA1-raw_sal.csv")
raw_LA1_temp <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/LA1-raw_temp.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_LA1_sal)
spec(raw_LA1_temp)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_LA1_sal$datetime <- as.POSIXct(raw_LA1_sal$combined, "%m/%d/%y %H:%M", tz = "")
raw_LA1_temp$datetime <- as.POSIXct(raw_LA1_temp$combined, "%m/%d/%y %H:%M", tz = "")
head(raw_LA1_temp)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_LA1_sal$datetime <- as.POSIXct(raw_LA1_sal$combined, "%d/%m/%Y %H:%M:%S", tz = "")
raw_LA1_temp$datetime <- as.POSIXct(raw_LA1_temp$combined, "%d/%m/%Y %H:%M:%S", tz = "")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_LA1_sal$datetime <- as.POSIXct(raw_LA1_sal$combined, "%d-%m-%Y %H:%M:%S", tz = "")
raw_LA1_temp$datetime <- as.POSIXct(raw_LA1_temp$combined, "%d-%m-%Y %H:%M:%S", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_LA1_sal)
head(raw_LA1_temp)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_LA1_sal <- raw_LA1_sal %>% rename("salinity" = "PSU")
raw_LA1_temp <- raw_LA1_temp  %>% rename("temp" = "value")
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_LA1_sal <- raw_LA1_sal %>% rename("salinity" = "value")
raw_LA1_temp <- raw_LA1_temp  %>% rename("temp" = "value")
firstyear <- 1990
finalyear <- 2022
#Store variables that we will include in the final data frame
lat <- 29.758
lon <- -93.890
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_LA1_sal <- raw_LA1_sal %>%
filter(between(salinity, 0, 42))
filtered_LA1_temp <- raw_LA1_temp %>%
filter(between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_LA1_sal$salinity))
print(summary(filtered_LA1_temp$temp))
#Store our data into a variable name with just the site name.
LA1_temp <- filtered_LA1_temp
LA1_sal <- filtered_LA1_sal
# we have NAs in the our salinity data frame in the datetime column - need to remove these
count.nas_sal <- is.na(LA1_sal$datetime) # store our NAs in a variable
summary(count.nas_sal) # we have 12 NAs that are stored as "TRUE" in our count.nas
# check to see if we have any NAs in our temperature data frame
count.nas_temp <- is.na(LA1_temp$datetime) # store our NAs in a variable
summary(count.nas_temp) # we have 6 NAs that are stored as "TRUE" in our count.nas
salplot <- ggplot(LA1_sal, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,40) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for LA1 - Sabine Lake, Louisiana") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(LA1_temp, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for LA1 - Sabine Lake, Louisiana") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
LA1_envrmonth_sal <- LA1_sal %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
LA1_envrmonth_temp <- LA1_temp %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(LA1_envrmonth_sal)
print(LA1_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
LA1_envryear_sal <- LA1_sal %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
LA1_envryear_temp <- LA1_temp %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(LA1_envryear_sal)
print(LA1_envryear_temp)
timeplot <- ggplot(LA1_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for LA1 - Sabine Lake, Louisiana") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(LA1_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for LA1 - Sabine Lake, Louisiana") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(LA1_temp$temp)
Mean_max_temperature_C <- mean(LA1_envryear_temp$max_temp)
Mean_min_temperature_C <- mean(LA1_envryear_temp$min_temp)
Temperature_st_dev <- sd(LA1_temp$temp)
Temperature_n <- nrow(LA1_temp)
Temperature_years <- nrow(LA1_envryear_temp)
#Create a data frame to store the temperature results
LA1_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(LA1_temp)
# Write to the combined file with all sites
write.table(LA1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(LA1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/LA1_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(LA1_sal$salinity)
Mean_max_Salinity_ppt <- mean(LA1_envryear_sal$max_salinity)
Mean_min_Salinity_ppt <- mean(LA1_envryear_sal$min_salinity)
Salinity_st_dev <- sd(LA1_sal$salinity)
Salinity_n <- nrow(LA1_sal)
Salinity_years <- nrow(LA1_envryear_sal)
#Create a data frame to store the temperature results
LA1_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(LA1_salinity)
# Write to the combined file with all sites
write.table(LA1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(LA1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/LA1_salinity.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
#install.packages("dataRetrieval")
library("dplyr") #Used for working with data frames
library("lubridate") #Used for time-date conversions
library("readr") #Used to read the CSV file
library("ggplot2")
library("dataRetrieval") #Used to download USGS data
library("tidyverse") #Used to join data frames
siteNumber <- "01208837" # USGS Site Code
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-27-2024")
site_name <- ("CT1") #Use site code with site number based on lat position and state
collection_type <- ("continuous")
# Import our site info and read the associated metdata.
CT1Info <- readNWISsite(siteNumber)
comment(CT1Info)
# Store the parameter codes that we want to collect data for. The USGS codes salinity as 00480 and temperature (C) as 00010.
parameterCd_sal <- "00480"
parameterCd_temp <- "00010"
# We will retrieve the unit values, or the data values collected at regular intervals. Note the regularity of collection, for this site it is every 15 minutes.
rawUnitValues_sal <- readNWISuv(siteNumber, parameterCd_sal, "2020-10-28", "2022-06-28")
rawUnitValues_temp <- readNWISuv(siteNumber, parameterCd_temp,"2020-10-28", "2022-06-28")
# Store the parameter codes that we want to collect data for. The USGS codes salinity as 00480 and temperature (C) as 00010.
parameterCd_sal <- "90860"
# We will retrieve the unit values, or the data values collected at regular intervals. Note the regularity of collection, for this site it is every 15 minutes.
rawUnitValues_sal <- readNWISuv(siteNumber, parameterCd_sal, "2020-10-28", "2022-06-28")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
View(rawUnitValues_sal)
# Join the data frames by common time using the dateTime column
raw_CT1 <- rawUnitValues_sal %>%
inner_join(rawUnitValues_temp, by = "dateTime")
# We now have "double" columns for site code, agency, time zone, and other parameters. Remove those columns.
raw_CT1 <- subset(raw_CT1, select = -c(agency_cd.y, X_00480_00000_cd, site_no.y, X_00010_00000_cd, tz_cd.x, tz_cd.y))
# We now have "double" columns for site code, agency, time zone, and other parameters. Remove those columns.
raw_CT1 <- subset(raw_CT1, select = -c(agency_cd.y, X_90860_00000_cd, site_no.y, X_00010_00000_cd, tz_cd.x, tz_cd.y))
# We now have "double" columns for site code, agency, time zone, and other parameters. Remove those columns.
raw_CT1 <- subset(raw_CT1, select = -c(agency_cd.y, X_TOP_90860_00000_cd, site_no.y, X_00010_00000_cd, tz_cd.x, tz_cd.y))
View(rawUnitValues_temp)
# We now have "double" columns for site code, agency, time zone, and other parameters. Remove those columns.
raw_CT1 <- subset(raw_CT1, select = -c(agency_cd.y, X_TOP_90860_00000_cd, site_no.y, X_TOP_00010_00000_cd, tz_cd.x, tz_cd.y))
View(raw_CT1)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_CT1 <- raw_CT1 %>% rename("temp" = "X_TOP_00010_00000", "salinity" = "X_TOP_00480_00000", "site" = "site_no.x", "agency" = "agency_cd.x")
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_CT1 <- raw_CT1 %>% rename("temp" = "X_TOP_00010_00000", "salinity" = "X_TOP_90860_00000", "site" = "site_no.x", "agency" = "agency_cd.x")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CT1$datetime <- as.POSIXct(raw_CT1$dateTime, "%Y/%m/%d %H:%M:%S", tz = "")
# Drop the old date-time column
raw_CT1 <- subset(raw_CT1, select = -c(dateTime))
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
summary(raw_CT1)
#Print the range (minimum and maximum) of dates of data collection.
print(summary(raw_CT1$datetime))
View(rawUnitValues_sal)
# We will retrieve the unit values, or the data values collected at regular intervals. Note the regularity of collection, for this site it is every 15 minutes.
rawUnitValues_sal <- readNWISuv(siteNumber, parameterCd_sal, "2020-06-05", "2023-10-03")
rawUnitValues_temp <- readNWISuv(siteNumber, parameterCd_temp,"2020-06-05", "2023-10-03")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
View(rawUnitValues_sal)
View(rawUnitValues_temp)
# Join the data frames by common time using the dateTime column
raw_CT1 <- rawUnitValues_sal %>%
inner_join(rawUnitValues_temp, by = "dateTime")
# We now have "double" columns for site code, agency, time zone, and other parameters. Remove those columns.
raw_CT1 <- subset(raw_CT1, select = -c(agency_cd.y, X_TOP_90860_00000_cd, site_no.y, X_TOP_00010_00000_cd, tz_cd.x, tz_cd.y))
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_CT1 <- raw_CT1 %>% rename("temp" = "X_TOP_00010_00000", "salinity" = "X_TOP_90860_00000", "site" = "site_no.x", "agency" = "agency_cd.x")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CT1$datetime <- as.POSIXct(raw_CT1$dateTime, "%Y/%m/%d %H:%M:%S", tz = "")
# Drop the old date-time column
raw_CT1 <- subset(raw_CT1, select = -c(dateTime))
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
summary(raw_CT1)
#Print the range (minimum and maximum) of dates of data collection.
print(summary(raw_CT1$datetime))
#Print the range (minimum and maximum) of the salinity values.
print(summary(raw_CT1$salinity))
#Print the range (minimum and maximum) of the temperature values.
print(summary(raw_CT1$temp))
firstyear <- 2020
finalyear <- 2023
#Store variables that we will include in the final data frame. Pull metadata from the USGS website link located above or the site description from the comment function above.
lat <- 41.1884333
lon <- -73.12125278
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_CT1<- raw_CT1 %>%
filter(between(salinity, 0, 40) & between(temp, -1, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_CT1$salinity))
print(summary(filtered_CT1$temp))
#Store our data into a variable name with just the site name.
CT1 <- filtered_CT1
# we have NAs in the our salinity data frame in the datetime column - need to remove these
count.nas <- is.na(CT1$datetime) # store our NAs in a variable
summary(count.nas) # we have 12 NAs that are stored as "TRUE" in our count.nas
write.table(CT1, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CT1_raw.csv", sep = ",", append = TRUE, col.names = TRUE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
salplot <- ggplot(CT1, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,45) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for CT1 - Ash Creek") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(CT1, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(-10, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for CT1 - Ash Creek") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
CT1_envrmonth <- CT1 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity),
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(CT1_envrmonth)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
CT1_envryear <- CT1 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(CT1_envryear)
timeplot <- ggplot(CT1_envrmonth, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Timeplot for CT1 - Ash Creek") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(CT1$temp)
Mean_max_temperature_C <- mean(CT1_envryear$max_temp)
Mean_min_temperature_C <- mean(CT1_envryear$min_temp)
Temperature_st_dev <- sd(CT1$temp)
Temperature_n <- nrow(CT1)
Temperature_years <- nrow(CT1_envryear)
#Create a data frame to store the temperature results
CT1_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
source_description <- ("USGS Water Data  - Housatonic River NR Nells Island NR Stratford, CT - 01208837")
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(CT1$temp)
Mean_max_temperature_C <- mean(CT1_envryear$max_temp)
Mean_min_temperature_C <- mean(CT1_envryear$min_temp)
Temperature_st_dev <- sd(CT1$temp)
Temperature_n <- nrow(CT1)
Temperature_years <- nrow(CT1_envryear)
#Create a data frame to store the temperature results
CT1_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(CT1_temp)
# Write to the combined file with all sites
write.table(CT1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(CT1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/CT1_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(CT1$salinity)
Mean_max_Salinity_ppt <- mean(CT1_envryear$max_salinity)
Mean_min_Salinity_ppt <- mean(CT1_envryear$min_salinity)
Salinity_st_dev <- sd(CT1$salinity)
Salinity_n <- nrow(CT1)
Salinity_years <- nrow(CT1_envryear)
#Create a data frame to store the temperature results
CT1_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(CT1_salinity)
# Write to the combined file with all sites
write.table(CT1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(CT1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/CT1_salinity.csv", row.names = FALSE)
