dt1$DO_local <- ifelse((trimws(as.character(dt1$DO_local))==trimws("NA")),NA,dt1$DO_local)
dt1$Temp <- ifelse((trimws(as.character(dt1$Temp))==trimws("NA")),NA,dt1$Temp)
dt1$Flag_Temp <- as.factor(ifelse((trimws(as.character(dt1$Flag_Temp))==trimws("NA")),NA,as.character(dt1$Flag_Temp)))
dt1$Cond <- ifelse((trimws(as.character(dt1$Cond))==trimws("NA")),NA,dt1$Cond)
dt1$SpCond <- ifelse((trimws(as.character(dt1$SpCond))==trimws("NA")),NA,dt1$SpCond)
dt1$nLFCond <- ifelse((trimws(as.character(dt1$nLFCond))==trimws("NA")),NA,dt1$nLFCond)
dt1$Salinity <- ifelse((trimws(as.character(dt1$Salinity))==trimws("NA")),NA,dt1$Salinity)
dt1$Flag_Cond <- as.factor(ifelse((trimws(as.character(dt1$Flag_Cond))==trimws("NA")),NA,as.character(dt1$Flag_Cond)))
dt1$DO_conc <- ifelse((trimws(as.character(dt1$DO_conc))==trimws("NA")),NA,dt1$DO_conc)
dt1$DO_sat <- ifelse((trimws(as.character(dt1$DO_sat))==trimws("NA")),NA,dt1$DO_sat)
dt1$DO_local <- ifelse((trimws(as.character(dt1$DO_local))==trimws("NA")),NA,dt1$DO_local)
dt1$Flag_DO <- as.factor(ifelse((trimws(as.character(dt1$Flag_DO))==trimws("NA")),NA,as.character(dt1$Flag_DO)))
dt1$pH <- ifelse((trimws(as.character(dt1$pH))==trimws("NA")),NA,dt1$pH)
dt1$pH_mV <- ifelse((trimws(as.character(dt1$pH_mV))==trimws("NA")),NA,dt1$pH_mV)
dt1$Flag_pH <- as.factor(ifelse((trimws(as.character(dt1$Flag_pH))==trimws("NA")),NA,as.character(dt1$Flag_pH)))
dt1$Pressure <- ifelse((trimws(as.character(dt1$Pressure))==trimws("NA")),NA,dt1$Pressure)
dt1$VerticalPosition <- ifelse((trimws(as.character(dt1$VerticalPosition))==trimws("NA")),NA,dt1$VerticalPosition)
dt1$Depth <- ifelse((trimws(as.character(dt1$Depth))==trimws("NA")),NA,dt1$Depth)
dt1$Comments <- as.factor(ifelse((trimws(as.character(dt1$Comments))==trimws("NA")),NA,as.character(dt1$Comments)))
# Here is the structure of the input data frame:
str(dt1)
attach(dt1)
summary(Timestamp)
summary(Site)
summary(Temp)
summary(Flag_Temp)
summary(Cond)
summary(SpCond)
summary(nLFCond)
summary(Salinity)
summary(Flag_Cond)
summary(DO_conc)
summary(DO_sat)
summary(DO_local)
summary(Flag_DO)
summary(pH)
summary(pH_mV)
summary(Flag_pH)
summary(Pressure)
summary(VerticalPosition)
summary(Depth)
summary(Comments)
summary(as.factor(dt1$Site))
summary(as.factor(dt1$Flag_Temp))
summary(as.factor(dt1$Flag_Cond))
summary(as.factor(dt1$Flag_DO))
summary(as.factor(dt1$Flag_pH))
summary(as.factor(dt1$Comments))
detach(dt1)
inUrl2  <- "https://pasta.lternet.edu/package/data/eml/knb-lter-pie/630/2/a4fef28fe245843d11d7ce380eb2f610"
infile2 <- tempfile()
try(download.file(inUrl2,infile2,method="curl"))
if (is.na(file.size(infile2))) download.file(inUrl2,infile2,method="auto")
dt2 <-read.csv(infile2,header=F
,skip=1
,sep=","
,quot='"'
, col.names=c(
"Timestamp",
"Site",
"Temp",
"Flag_Temp",
"Cond",
"SpCond",
"nLFCond",
"Salinity",
"Flag_Cond",
"DO_conc",
"DO_sat",
"DO_local",
"Flag_DO",
"pH",
"pH_mV",
"Flag_pH",
"Pressure",
"VerticalPosition",
"Depth",
"Comments"    ), check.names=TRUE)
unlink(infile2)
# attempting to convert dt2$Timestamp dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d %H:%M:%S"
tmp2Timestamp<-as.POSIXct(dt2$Timestamp,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp2Timestamp) == length(tmp2Timestamp[!is.na(tmp2Timestamp)])){dt2$Timestamp <- tmp2Timestamp } else {print("Date conversion failed for dt2$Timestamp. Please inspect the data and do the date conversion yourself.")}
if (class(dt2$Site)!="factor") dt2$Site<- as.factor(dt2$Site)
if (class(dt2$Temp)=="factor") dt2$Temp <-as.numeric(levels(dt2$Temp))[as.integer(dt2$Temp) ]
if (class(dt2$Temp)=="character") dt2$Temp <-as.numeric(dt2$Temp)
if (class(dt2$Flag_Temp)!="factor") dt2$Flag_Temp<- as.factor(dt2$Flag_Temp)
if (class(dt2$Cond)=="factor") dt2$Cond <-as.numeric(levels(dt2$Cond))[as.integer(dt2$Cond) ]
if (class(dt2$Cond)=="character") dt2$Cond <-as.numeric(dt2$Cond)
if (class(dt2$SpCond)=="factor") dt2$SpCond <-as.numeric(levels(dt2$SpCond))[as.integer(dt2$SpCond) ]
if (class(dt2$SpCond)=="character") dt2$SpCond <-as.numeric(dt2$SpCond)
if (class(dt2$nLFCond)=="factor") dt2$nLFCond <-as.numeric(levels(dt2$nLFCond))[as.integer(dt2$nLFCond) ]
if (class(dt2$nLFCond)=="character") dt2$nLFCond <-as.numeric(dt2$nLFCond)
if (class(dt2$Salinity)=="factor") dt2$Salinity <-as.numeric(levels(dt2$Salinity))[as.integer(dt2$Salinity) ]
if (class(dt2$Salinity)=="character") dt2$Salinity <-as.numeric(dt2$Salinity)
if (class(dt2$Flag_Cond)!="factor") dt2$Flag_Cond<- as.factor(dt2$Flag_Cond)
if (class(dt2$DO_conc)=="factor") dt2$DO_conc <-as.numeric(levels(dt2$DO_conc))[as.integer(dt2$DO_conc) ]
if (class(dt2$DO_conc)=="character") dt2$DO_conc <-as.numeric(dt2$DO_conc)
if (class(dt2$DO_sat)=="factor") dt2$DO_sat <-as.numeric(levels(dt2$DO_sat))[as.integer(dt2$DO_sat) ]
if (class(dt2$DO_sat)=="character") dt2$DO_sat <-as.numeric(dt2$DO_sat)
if (class(dt2$DO_local)=="factor") dt2$DO_local <-as.numeric(levels(dt2$DO_local))[as.integer(dt2$DO_local) ]
if (class(dt2$DO_local)=="character") dt2$DO_local <-as.numeric(dt2$DO_local)
if (class(dt2$Flag_DO)!="factor") dt2$Flag_DO<- as.factor(dt2$Flag_DO)
if (class(dt2$pH)=="factor") dt2$pH <-as.numeric(levels(dt2$pH))[as.integer(dt2$pH) ]
if (class(dt2$pH)=="character") dt2$pH <-as.numeric(dt2$pH)
if (class(dt2$pH_mV)=="factor") dt2$pH_mV <-as.numeric(levels(dt2$pH_mV))[as.integer(dt2$pH_mV) ]
if (class(dt2$pH_mV)=="character") dt2$pH_mV <-as.numeric(dt2$pH_mV)
if (class(dt2$Flag_pH)!="factor") dt2$Flag_pH<- as.factor(dt2$Flag_pH)
if (class(dt2$Pressure)=="factor") dt2$Pressure <-as.numeric(levels(dt2$Pressure))[as.integer(dt2$Pressure) ]
if (class(dt2$Pressure)=="character") dt2$Pressure <-as.numeric(dt2$Pressure)
if (class(dt2$VerticalPosition)=="factor") dt2$VerticalPosition <-as.numeric(levels(dt2$VerticalPosition))[as.integer(dt2$VerticalPosition) ]
if (class(dt2$VerticalPosition)=="character") dt2$VerticalPosition <-as.numeric(dt2$VerticalPosition)
if (class(dt2$Depth)=="factor") dt2$Depth <-as.numeric(levels(dt2$Depth))[as.integer(dt2$Depth) ]
if (class(dt2$Depth)=="character") dt2$Depth <-as.numeric(dt2$Depth)
if (class(dt2$Comments)!="factor") dt2$Comments<- as.factor(dt2$Comments)
dt2$Temp <- ifelse((trimws(as.character(dt2$Temp))==trimws("NA")),NA,dt2$Temp)
dt2$Flag_Temp <- as.factor(ifelse((trimws(as.character(dt2$Flag_Temp))==trimws("NA")),NA,as.character(dt2$Flag_Temp)))
dt2$Cond <- ifelse((trimws(as.character(dt2$Cond))==trimws("NA")),NA,dt2$Cond)
dt2$SpCond <- ifelse((trimws(as.character(dt2$SpCond))==trimws("NA")),NA,dt2$SpCond)
dt2$nLFCond <- ifelse((trimws(as.character(dt2$nLFCond))==trimws("NA")),NA,dt2$nLFCond)
dt2$Salinity <- ifelse((trimws(as.character(dt2$Salinity))==trimws("NA")),NA,dt2$Salinity)
dt2$Flag_Cond <- as.factor(ifelse((trimws(as.character(dt2$Flag_Cond))==trimws("NA")),NA,as.character(dt2$Flag_Cond)))
dt2$DO_conc <- ifelse((trimws(as.character(dt2$DO_conc))==trimws("NA")),NA,dt2$DO_conc)
dt2$DO_sat <- ifelse((trimws(as.character(dt2$DO_sat))==trimws("NA")),NA,dt2$DO_sat)
dt2$DO_local <- ifelse((trimws(as.character(dt2$DO_local))==trimws("NA")),NA,dt2$DO_local)
dt2$Flag_DO <- as.factor(ifelse((trimws(as.character(dt2$Flag_DO))==trimws("NA")),NA,as.character(dt2$Flag_DO)))
dt2$pH <- ifelse((trimws(as.character(dt2$pH))==trimws("NA")),NA,dt2$pH)
dt2$pH_mV <- ifelse((trimws(as.character(dt2$pH_mV))==trimws("NA")),NA,dt2$pH_mV)
dt2$Flag_pH <- as.factor(ifelse((trimws(as.character(dt2$Flag_pH))==trimws("NA")),NA,as.character(dt2$Flag_pH)))
dt2$Pressure <- ifelse((trimws(as.character(dt2$Pressure))==trimws("NA")),NA,dt2$Pressure)
dt2$VerticalPosition <- ifelse((trimws(as.character(dt2$VerticalPosition))==trimws("NA")),NA,dt2$VerticalPosition)
dt2$Depth <- ifelse((trimws(as.character(dt2$Depth))==trimws("NA")),NA,dt2$Depth)
dt2$Comments <- as.factor(ifelse((trimws(as.character(dt2$Comments))==trimws("NA")),NA,as.character(dt2$Comments)))
# Here is the structure of the input data frame:
str(dt2)
attach(dt2)
summary(Timestamp)
summary(Site)
summary(Temp)
summary(Flag_Temp)
summary(Cond)
summary(SpCond)
summary(nLFCond)
summary(Salinity)
summary(Flag_Cond)
summary(DO_conc)
summary(DO_sat)
summary(DO_local)
summary(Flag_DO)
summary(pH)
summary(pH_mV)
summary(Flag_pH)
summary(Pressure)
summary(VerticalPosition)
summary(Depth)
summary(Comments)
View(dt1)
View(raw_FL2)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-21-2024")
source_description <- ("University of Maine")
site_name <- ("ME2") #Use site code with site number based on lat position and state
collection_type <- ("intermittent")
#The file we will be working with is from the Upper Damariscotta Estuary. The ID_Site for this site is ME2.
raw_ME2 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/ME2-raw.csv")
library("dplyr") #Used for working with data frames
library("lubridate") #Used for time-date conversions
library("readr") #Used to read the CSV file
library("ggplot2")
#The file we will be working with is from the Upper Damariscotta Estuary. The ID_Site for this site is ME2.
raw_ME2 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/ME2-raw.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_ME2)
View(raw_ME2)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_ME2$datetime <- as.POSIXct(raw_ME2$Timestamp, "%m/%d/%y %H:%M", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_ME2)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_ME2 <- raw_ME2 %>% rename("salinity" = "salinity")
raw_ME2 <- raw_ME2  %>% rename("temp" = "temperature")
firstyear <- 2015
finalyear <- 2023
#Store variables that we will include in the final data frame
lat <- 43.986
lon <- -69.55
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_ME2 <- raw_ME2 %>%
filter(between(salinity, 0, 42))
filtered_ME2 <- raw_ME2 %>%
filter(between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_ME2$salinity))
print(summary(filtered_ME2$temp))
#Store our data into a variable name with just the site name.
ME2 <- filtered_ME2
salplot <- ggplot(ME2, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,40) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for ME2 - Damariscotta Estuary") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(ME2, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for ME2 - Damariscotta Estuary") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
ME2_envrmonth_sal <- ME2 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
ME2_envrmonth_temp <- ME2 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(ME2_envrmonth_sal)
print(ME2_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
ME2_envryear_sal <- ME2 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
ME2_envryear_temp <- ME2 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(ME2_envryear_sal)
print(ME2_envryear_temp)
timeplot <- ggplot(ME2_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for ME2 - Damariscotta Estuary") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(ME2_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for ME2 - Damariscotta Estuary") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(ME2$temp)
Mean_max_temperature_C <- mean(ME2_envryear_temp$max_temp)
Mean_min_temperature_C <- mean(ME2_envryear_temp$min_temp)
Temperature_st_dev <- sd(ME2$temp)
Temperature_n <- nrow(ME2)
Temperature_years <- nrow(ME2_envryear_temp)
#Create a data frame to store the temperature results
ME2_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(ME2_temp)
# Write to the combined file with all sites
write.table(ME2_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(ME2_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/ME2_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(ME2$salinity)
Mean_max_Salinity_ppt <- mean(ME2_envryear_sal$max_salinity)
Mean_min_Salinity_ppt <- mean(ME2_envryear_sal$min_salinity)
Salinity_st_dev <- sd(ME2$salinity)
Salinity_n <- nrow(ME2)
Salinity_years <- nrow(ME2_envryear_sal)
#Create a data frame to store the temperature results
ME2_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(ME2_salinity)
# Write to the combined file with all sites
write.table(ME2_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(ME2_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/ME2_salinity.csv", row.names = FALSE)
install.packages("ape")
install.packages("corHMM")
install.packages("diversitree")
install.packages("geiger")
install.packages("hisse")
install.packages("OUwie")
install.packages("phytools")
install.packages("remotes")
remotes::install_github("liamrevell/phytools")
install.packages("phytools")
setwd("~/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
library("dplyr") #Used for working with data frames
library("lubridate") #Used for time-date conversions
library("readr") #Used to read the CSV file
library("ggplot2")
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-25-2024")
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-25-2024")
source_description <- ("Nova Scotia Gov Water Quality Data")
site_name <- ("CN1") #Use site code with site number based on lat position and state
collection_type <- ("continuous")
#The file we will be working with is from Lower Cedar Point, Maryland. The ID_Site for this site is VA2.
raw_CN1_sal <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN1-raw_sal.csv")
raw_CN1_temp <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN1-raw_temp.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_CN1_sal)
spec(raw_CN1_temp)
View(raw_CN1_sal)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN1_sal$datetime <- as.POSIXct(raw_CN1_sal$TIMESTAMP, "%y/%m/%d %H:%M:%S %p", tz = "")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN1_sal$datetime <- as.POSIXct(raw_CN1_sal$TIMESTAMP, "%y/%m/%d %I:%M:%S %p", tz = "")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN1_sal$datetime <- as.POSIXct(raw_CN1_sal$TIMESTAMP, "%y/%m/%d %I:%M:%S %p", tz = "")
View(raw_CN1_sal)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN1_sal$datetime <- as.POSIXct(raw_CN1_sal$TIMESTAMP, "%y/%m/%d %I:%M:%S", tz = "")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN1_sal$datetime <- as.POSIXct(raw_CN1_sal$TIMESTAMP, "%y/%m/%d %I:%M:%S %p", tz = "EST")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN1_sal$datetime <- as.POSIXct(raw_CN1_sal$TIMESTAMP, "%Y/%m/%d %I:%M:%S %p", tz = "")
raw_CN1_temp$datetime <- as.POSIXct(raw_CN1_temp$TIMESTAMP, "%Y/%m/%d %I:%M:%S %p", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_CN1_sal)
head(raw_CN1_temp)
View(raw_CN1_temp)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_CN1_sal <- raw_CN1_sal %>% rename("salinity" = "VALUE")
raw_CN1_temp <- raw_CN1_temp  %>% rename("temp" = "VALUE")
x <- range(raw_CN1_sal$datetime)
x
firstyear <- 2020
finalyear <- 2021
#Store variables that we will include in the final data frame
lat <- 43.79075
lon <- -65.83619
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_CN1_sal <- raw_CN1_sal %>%
filter(between(salinity, 0, 42))
filtered_CN1_temp <- raw_CN1_temp %>%
filter(between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_CN1_sal$salinity))
print(summary(filtered_CN1_temp$temp))
#Store our data into a variable name with just the site name.
CN1_temp <- filtered_CN1_temp
CN1_sal <- filtered_CN1_sal
salplot <- ggplot(CN1_sal, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,40) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for CN1 - Salt Bay, Canada") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(CN1_temp, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for CN1 - Salt Bay, Canada") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
CN1_envrmonth_sal <- CN1_sal %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
CN1_envrmonth_temp <- CN1_temp %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(CN1_envrmonth_sal)
print(CN1_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
CN1_envryear_sal <- CN1_sal %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
CN1_envryear_temp <- CN1_temp %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(CN1_envryear_sal)
print(CN1_envryear_temp)
timeplot <- ggplot(CN1_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for CN1 - Salt Bay, Canada") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(CN1_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for CN1 - Salt Bay, Canada") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(CN1_temp$temp)
Mean_max_temperature_C <- mean(CN1_envryear_temp$max_temp)
Mean_min_temperature_C <- mean(CN1_envryear_temp$min_temp)
Temperature_st_dev <- sd(CN1_temp$temp)
Temperature_n <- nrow(CN1_temp)
Temperature_years <- nrow(CN1_envryear_temp)
#Create a data frame to store the temperature results
CN1_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(CN1_temp)
# Write to the combined file with all sites
write.table(CN1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(CN1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/CN1_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(CN1_sal$salinity)
Mean_max_Salinity_ppt <- mean(CN1_envryear_sal$max_salinity)
Mean_min_Salinity_ppt <- mean(CN1_envryear_sal$min_salinity)
Salinity_st_dev <- sd(CN1_sal$salinity)
Salinity_n <- nrow(CN1_sal)
Salinity_years <- nrow(CN1_envryear_sal)
#Create a data frame to store the temperature results
CN1_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(CN1_salinity)
# Write to the combined file with all sites
write.table(CN1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(CN1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/CN1_salinity.csv", row.names = FALSE)
print(CN1_envryear_temp)
length(CN1_sal)
nrow(CN1_sal)
na.omit(CN1_sal)
nrow(CN1_sal)
na.omit(CN1_sal$datetime)
length(CN1_sal)
nrow(CN1_sal)
nrow(CN1_sal$datetime)
#The file we will be working with is from Salt Bay, Canada. The ID_Site for this site is CN1.
raw_CN1_sal <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN1-raw_sal.csv")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN1_sal$datetime <- as.POSIXct(raw_CN1_sal$TIMESTAMP, "%Y/%m/%d %I:%M:%S %p", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_CN1_sal)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_CN1_sal <- raw_CN1_sal %>% rename("salinity" = "VALUE")
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_CN1_sal <- raw_CN1_sal %>%
filter(between(salinity, 0, 42))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_CN1_sal$salinity))
CN1_sal <- filtered_CN1_sal
is.na(CN1_sal$datetime)
count.nas <- is.na(CN1_sal$datetime)
length(count.nas == "TRUE")
summary(count.nas)
# we have NAs in the salinity datetime column
CN1_sal <- filter(CN1_sal, C != "NA")
# we have NAs in the salinity datetime column
CN1_sal[CN1_sal$datetime != "NA", ]
str(count.nas)
# we have NAs in the salinity datetime column
nrows(CN1_sal)
# we have NAs in the salinity datetime column
nrow(CN1_sal)
which(count.nas == TRUE)
CN1_sal <- CN1_sal[-c(38074, 38075, 38076, 38077, 38078, 38079,
90414, 90415, 90416, 90417, 90418, 90419)]
CN1_sal <- CN1_sal[-c(38074, 38075, 38076, 38077, 38078, 38079,
90414, 90415, 90416, 90417, 90418, 90419), ]
nrow(CN1_sal)
check <- 104905-104893
check
summary(count.nas) #
# we have NAs in the our salinity data frame in the datetime column - need to remove these
count.nas_sal <- is.na(CN1_sal$datetime) # store our NAs in a variable
summary(count.nas_sal) # we have 12 NAs that are stored as "TRUE" in our count.nas
# we have NAs in the our temperature data frame in the datetime column - need to remove these
count.nas_temp <- is.na(CN1_temp$datetime) # store our NAs in a variable
#Data was downloaded on 3/25/2024
#Source - https://data.novascotia.ca/Nature-and-Environment/Nova-Scotia-Water-Quality-Data-Station-Locations-M/svms-mkst
#The site was sampled continuously
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-25-2024")
source_description <- ("Nova Scotia Gov Water Quality Data")
site_name <- ("CN1") #Use site code with site number based on lat position and state
collection_type <- ("continuous")
