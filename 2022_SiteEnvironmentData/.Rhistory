group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
VA2_envryear_temp <- VA2_temp %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(VA2_envryear_sal)
print(VA2_envryear_temp)
timeplot <- ggplot(VA2_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for VA2 - Kinglsey Plantation") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(VA2_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for VA2 - Deep Water Shoal") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(VA2_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for VA2 - Deep Water Shoal") +
ylim(1,12) +
theme_minimal()
timeplot
raw_VA2_temp <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/VA2-raw_temp.csv")
spec(raw_VA2_temp)
raw_VA2_temp$datetime <- as.POSIXct(raw_VA2_temp$Timestamp, "%m/%d/%y %H:%M", tz = "")
head(raw_VA2_temp)
raw_VA2_temp <- raw_VA2_temp  %>% rename("temp" = "Temp")
#Store variables that we will include in the final data frame
lat <- 37.21462
lon <- -76.4483
firstyear <- 2010
finalyear <- 2022
filtered_VA2_temp <- raw_VA2_temp %>%
filter(between(temp, 0, 40))
print(summary(filtered_VA2_temp$temp))
#Store our data into a variable name with just the site name.
VA2_temp <- filtered_VA2_temp
tempplot <- ggplot(VA2_temp, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for VA2 - Deep Water Shoal") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
VA2_envrmonth_sal <- VA2_sal %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
VA2_envrmonth_temp <- VA2_temp %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(VA2_envrmonth_sal)
print(VA2_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
VA2_envryear_sal <- VA2_sal %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
VA2_envryear_temp <- VA2_temp %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(VA2_envryear_sal)
print(VA2_envryear_temp)
timeplot <- ggplot(VA2_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for VA2 - Deep Water Shoal") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(VA2_temp$temp)
Mean_max_temperature_C <- mean(VA2_envryear_temp$max_temp)
Mean_min_temperature_C <- mean(VA2_envryear_temp$min_temp)
Temperature_st_dev <- sd(VA2_temp$temp)
Temperature_n <- nrow(VA2_temp)
Temperature_years <- nrow(VA2_envryear_temp)
#Create a data frame to store the temperature results
VA2_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(VA2_temp)
# Write to the combined file with all sites
write.table(VA2_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(VA2_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/VA2_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(VA2_sal$salinity)
Mean_max_Salinity_ppt <- mean(VA2_envryear_sal$max_salinity)
Mean_min_Salinity_ppt <- mean(VA2_envryear_sal$min_salinity)
Salinity_st_dev <- sd(VA2_sal$salinity)
Salinity_n <- nrow(VA2_sal)
Salinity_years <- nrow(VA2_envryear_sal)
#Create a data frame to store the temperature results
VA2_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(VA2_salinity)
# Write to the combined file with all sites
write.table(VA2_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(VA2_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/VA2_salinity.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("09-15-2023")
source_description <- ("VIMS Water Quality Data")
site_name <- ("VA1") #Use site code with site number based on lat position and state
collection_type <- ("intermittent")
#The file we will be working with is from Wreck Shoal, VA. The ID_Site for this site is VA1.
raw_VA2 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/VA1-raw.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_VA2)
View(raw_VA2)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_VA2$datetime <- as.POSIXct(raw_VA2$DateRetrieved, "%d-%b-%y", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_VA2)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_VA2 <- raw_VA2_sal %>% rename("salinity" = "Salinity")
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_VA2 <- raw_VA2 %>% rename("salinity" = "Salinity")
raw_VA2 <- raw_VA2  %>% rename("temp" = "WaterTemperature")
#The file we will be working with is from Wreck Shoal, VA. The ID_Site for this site is VA1.
raw_VA2 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/VA1-raw.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_VA2)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_VA2$datetime <- as.POSIXct(raw_VA2$DateRetrieved, "%d-%b-%y", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_VA2)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_VA2 <- raw_VA2 %>% rename("salinity" = "Salinity")
raw_VA2 <- raw_VA2  %>% rename("temp" = "WaterTemperature")
finalyear <- 2022
firstyear <- 2010
#Store variables that we will include in the final data frame
lat <- 37.060283
lon <- -76.572217
firstyear <- 2010
finalyear <- 2022
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_VA2 <- raw_VA2 %>%
filter(between(salinity, 0, 42))
filtered_VA2 <- raw_VA2 %>%
filter(between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_VA2$salinity))
print(summary(filtered_VA2$temp))
#Store our data into a variable name with just the site name.
VA2 <- filtered_VA2
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("09-15-2023")
source_description <- ("VIMS Water Quality Data")
site_name <- ("VA1") #Use site code with site number based on lat position and state
collection_type <- ("intermittent")
#The file we will be working with is from Wreck Shoal, VA. The ID_Site for this site is VA1.
raw_VA1 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/VA1-raw.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_VA1)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_VA1$datetime <- as.POSIXct(raw_VA1$DateRetrieved, "%d-%b-%y", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_VA1)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_VA1 <- raw_VA1 %>% rename("salinity" = "Salinity")
raw_VA1 <- raw_VA1  %>% rename("temp" = "WaterTemperature")
#Store variables that we will include in the final data frame
lat <- 37.060283
lon <- -76.572217
firstyear <- 2010
finalyear <- 2022
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_VA1 <- raw_VA1 %>%
filter(between(salinity, 0, 42))
filtered_VA1 <- raw_VA1 %>%
filter(between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_VA1$salinity))
print(summary(filtered_VA1$temp))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_VA1$salinity))
#Store our data into a variable name with just the site name.
VA1 <- filtered_VA1
salplot <- ggplot(VA1_sal, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,40) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for VA1 - Wreck Shoal James River") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot <- ggplot(VA1, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,40) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for VA1 - Wreck Shoal James River") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(VA1, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for VA1 - Wreck Shoal James River") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
VA1_envrmonth_sal <- VA1 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
VA1_envrmonth_temp <- VA1 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(VA1_envrmonth_sal)
print(VA1_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
VA1_envryear_sal <- VA1 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
VA1_envryear_temp <- VA1 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(VA1_envryear_sal)
print(VA1_envryear_temp)
timeplot <- ggplot(VA1_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for VA1 - Deep Water Shoal") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(VA1_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for VA1 - Deep Water Shoal") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(VA1$temp)
Mean_max_temperature_C <- mean(VA1_envryear_temp$max_temp)
Mean_min_temperature_C <- mean(VA1_envryear_temp$min_temp)
Temperature_st_dev <- sd(VA1$temp)
Temperature_n <- nrow(VA1)
Temperature_years <- nrow(VA1_envryear_temp)
#Create a data frame to store the temperature results
VA1_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(VA1_temp)
# Write to the combined file with all sites
write.table(VA1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(VA1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/VA1_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(VA1$salinity)
Mean_max_Salinity_ppt <- mean(VA1_envryear_sal$max_salinity)
Mean_min_Salinity_ppt <- mean(VA1_envryear_sal$min_salinity)
Salinity_st_dev <- sd(VA1$salinity)
Salinity_n <- nrow(VA1)
Salinity_years <- nrow(VA1_envryear_sal)
#Create a data frame to store the temperature results
VA1_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(VA1_salinity)
# Write to the combined file with all sites
write.table(VA1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(VA1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/VA1_salinity.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
library("dplyr") #Used for working with data frames
library("lubridate") #Used for time-date conversions
library("readr") #Used to read the CSV file
library("ggplot2")
#The file we will be working with is from Lower Cedar Point, Maryland. The ID_Site for this site is MA1.
raw_MA1<- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/MA1-raw.csv")
View(raw_MA1)
View(raw_MA1)
#The file we will be working with is from Lower Cedar Point, Maryland. The ID_Site for this site is MA1.
raw_MA1<- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/MA1-raw.csv")
View(raw_MA1)
raw_MA1_2014 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/MA1-raw_2014_temp.csv")
raw_MA1_2014 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/MA1-raw_2014.csv")
raw_MA1_2015 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/MA1-raw_2015.csv")
raw_MA1_2016 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/MA1-raw_2016.csv")
raw_MA1_2017 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/MA1-raw_2017.csv")
raw_MA1_2018 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/MA1-raw_2018.csv")
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-21-2024")
source_description <- ("PIELTER Long-Term Montitoring Data")
site_name <- ("MA1") #Use site code with site number based on lat position and state
collection_type <- ("continuous seasonal")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_MA1)
spec(raw_MA1_2014)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_MA1_2014$datetime <- as.POSIXct(raw_MA1_2014$DateRetrieved, "%m/%d/%y %H:%M", tz = "")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_MA1_2014$datetime <- as.POSIXct(raw_MA1_2014$Timestamp, "%m/%d/%y %H:%M", tz = "")
raw_MA1_2014$datetime <- as.POSIXct(raw_MA1_2014$Timestamp, "%m/%d/%y %H:%M", tz = "")
raw_MA1_2015$datetime <- as.POSIXct(raw_MA1_2015$Timestamp, "%m/%d/%y %H:%M", tz = "")
raw_MA1_2016$datetime <- as.POSIXct(raw_MA1_2016$Timestamp, "%m/%d/%y %H:%M", tz = "")
raw_MA1_2017$datetime <- as.POSIXct(raw_MA1_2017$Timestamp, "%m/%d/%y %H:%M", tz = "")
raw_MA1_2018$datetime <- as.POSIXct(raw_MA1_2018$Timestamp, "%m/%d/%y %H:%M", tz = "")
View(raw_MA1)
raw_MA1$datetime <- as.POSIXct(raw_MA1$Timestamp, "%m/%d/%y %H:%M", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_MA1)
head(raw_MA1_2014)
raw_MA1 <- rbind(raw_MA1, raw_MA1_2014, raw_MA1_2015, raw_MA1_2016, raw_MA1_2017, raw_MA1_2018)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_MA1 <- raw_MA1 %>% rename("salinity" = "Salinity")
raw_MA1 <- raw_MA1  %>% rename("temp" = "Temp")
firstyear <- 2014
finalyear <- 2022
#Store variables that we will include in the final data frame
lat <- 42.762543
lon <- -70.857724
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_MA1 <- raw_MA1 %>%
filter(between(salinity, 0, 42))
filtered_MA1 <- raw_MA1 %>%
filter(between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_MA1$salinity))
print(summary(filtered_MA1$temp))
#Store our data into a variable name with just the site name.
MA1 <- filtered_MA1
salplot <- ggplot(MA1, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,40) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for MA1 - Plum Island") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(MA1, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for MA1 - Plum Island") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
MA1_envrmonth_sal <- MA1 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
MA1_envrmonth_temp <- MA1 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(MA1_envrmonth_sal)
print(MA1_envrmonth_temp)
print(MA1_envrmonth_sal)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
MA1_envrmonth_sal <- MA1 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
MA1_envrmonth_temp <- MA1 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(MA1_envrmonth_sal)
print(MA1_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
MA1_envryear <- MA1_sal %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
print(MA1_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
MA1_envryear_sal <- MA1_sal %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
MA1_envryear_sal <- MA1 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
MA1_envryear_temp <- MA1 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(MA1_envryear_sal)
print(MA1_envryear_temp)
timeplot <- ggplot(MA1_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for MA1 - Deep Water Shoal") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(MA1_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for MA1 - Plum Island") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(MA1_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for MA1 - Plum Island") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(MA1_temp$temp)
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(MA1$temp)
Mean_max_temperature_C <- mean(MA1_envryear_temp$max_temp)
Mean_min_temperature_C <- mean(MA1_envryear_temp$min_temp)
Temperature_st_dev <- sd(MA1$temp)
Temperature_n <- nrow(MA1_temp)
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(MA1$temp)
Mean_max_temperature_C <- mean(MA1_envryear_temp$max_temp)
Mean_min_temperature_C <- mean(MA1_envryear_temp$min_temp)
Temperature_st_dev <- sd(MA1$temp)
Temperature_n <- nrow(MA1)
Temperature_years <- nrow(MA1_envryear_temp)
#Create a data frame to store the temperature results
MA1_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(MA1_temp)
# Write to the combined file with all sites
write.table(MA1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(MA1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/MA1_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(MA1$salinity)
Mean_max_Salinity_ppt <- mean(MA1_envryear_sal$max_salinity)
Mean_min_Salinity_ppt <- mean(MA1_envryear_sal$min_salinity)
Salinity_st_dev <- sd(MA1$salinity)
Salinity_n <- nrow(MA1)
Salinity_years <- nrow(MA1_envryear_sal)
#Create a data frame to store the temperature results
MA1_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(MA1_salinity)
# Write to the combined file with all sites
write.table(MA1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(MA1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/MA1_salinity.csv", row.names = FALSE)
