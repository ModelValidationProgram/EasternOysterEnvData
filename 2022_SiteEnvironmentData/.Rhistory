labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for CN1 - Salt Bay, Canada") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(CN1_temp, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for CN1 - Salt Bay, Canada") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
CN1_envrmonth_sal <- CN1_sal %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
CN1_envrmonth_temp <- CN1_temp %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(CN1_envrmonth_sal)
print(CN1_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
CN1_envryear_sal <- CN1_sal %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
CN1_envryear_temp <- CN1_temp %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(CN1_envryear_sal)
print(CN1_envryear_temp)
timeplot <- ggplot(CN1_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for CN1 - Salt Bay, Canada") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(CN1_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for CN1 - Salt Bay, Canada") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(CN1_temp$temp)
Mean_max_temperature_C <- mean(CN1_envryear_temp$max_temp)
Mean_min_temperature_C <- mean(CN1_envryear_temp$min_temp)
Temperature_st_dev <- sd(CN1_temp$temp)
Temperature_n <- nrow(CN1_temp)
Temperature_years <- nrow(CN1_envryear_temp)
#Create a data frame to store the temperature results
CN1_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(CN1_temp)
# Write to the combined file with all sites
write.table(CN1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(CN1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/CN1_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(CN1_sal$salinity)
Mean_max_Salinity_ppt <- mean(CN1_envryear_sal$max_salinity)
Mean_min_Salinity_ppt <- mean(CN1_envryear_sal$min_salinity)
Salinity_st_dev <- sd(CN1_sal$salinity)
Salinity_n <- nrow(CN1_sal)
Salinity_years <- nrow(CN1_envryear_sal)
#Create a data frame to store the temperature results
CN1_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(CN1_salinity)
# Write to the combined file with all sites
write.table(CN1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(CN1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/CN1_salinity.csv", row.names = FALSE)
print(CN1_envryear_temp)
length(CN1_sal)
nrow(CN1_sal)
na.omit(CN1_sal)
nrow(CN1_sal)
na.omit(CN1_sal$datetime)
length(CN1_sal)
nrow(CN1_sal)
nrow(CN1_sal$datetime)
#The file we will be working with is from Salt Bay, Canada. The ID_Site for this site is CN1.
raw_CN1_sal <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN1-raw_sal.csv")
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN1_sal$datetime <- as.POSIXct(raw_CN1_sal$TIMESTAMP, "%Y/%m/%d %I:%M:%S %p", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_CN1_sal)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_CN1_sal <- raw_CN1_sal %>% rename("salinity" = "VALUE")
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_CN1_sal <- raw_CN1_sal %>%
filter(between(salinity, 0, 42))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_CN1_sal$salinity))
CN1_sal <- filtered_CN1_sal
is.na(CN1_sal$datetime)
count.nas <- is.na(CN1_sal$datetime)
length(count.nas == "TRUE")
summary(count.nas)
# we have NAs in the salinity datetime column
CN1_sal <- filter(CN1_sal, C != "NA")
# we have NAs in the salinity datetime column
CN1_sal[CN1_sal$datetime != "NA", ]
str(count.nas)
# we have NAs in the salinity datetime column
nrows(CN1_sal)
# we have NAs in the salinity datetime column
nrow(CN1_sal)
which(count.nas == TRUE)
CN1_sal <- CN1_sal[-c(38074, 38075, 38076, 38077, 38078, 38079,
90414, 90415, 90416, 90417, 90418, 90419)]
CN1_sal <- CN1_sal[-c(38074, 38075, 38076, 38077, 38078, 38079,
90414, 90415, 90416, 90417, 90418, 90419), ]
nrow(CN1_sal)
check <- 104905-104893
check
summary(count.nas) #
# we have NAs in the our salinity data frame in the datetime column - need to remove these
count.nas_sal <- is.na(CN1_sal$datetime) # store our NAs in a variable
summary(count.nas_sal) # we have 12 NAs that are stored as "TRUE" in our count.nas
# we have NAs in the our temperature data frame in the datetime column - need to remove these
count.nas_temp <- is.na(CN1_temp$datetime) # store our NAs in a variable
#Data was downloaded on 3/25/2024
#Source - https://data.novascotia.ca/Nature-and-Environment/Nova-Scotia-Water-Quality-Data-Station-Locations-M/svms-mkst
#The site was sampled continuously
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-25-2024")
source_description <- ("Nova Scotia Gov Water Quality Data")
site_name <- ("CN1") #Use site code with site number based on lat position and state
collection_type <- ("continuous")
knitr::opts_chunk$set(echo = TRUE)
library("dplyr") #Used for working with data frames
library("lubridate") #Used for time-date conversions
library("readr") #Used to read the CSV file
library("ggplot2")
setwd("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
#Data was downloaded on 3/25/2024
#Source - https://data.novascotia.ca/Nature-and-Environment/Nova-Scotia-Water-Quality-Data-Station-Locations-M/svms-mkst
#The site was sampled continuously
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-25-2024")
source_description <- ("Nova Scotia Gov Water Quality Data")
site_name <- ("CN1") #Use site code with site number based on lat position and state
collection_type <- ("continuous")
#The file we will be working with is from Salt Bay, Canada. The ID_Site for this site is CN1.
raw_CN1_sal <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN1-raw_sal.csv")
raw_CN1_temp <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN1-raw_temp.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_CN1_sal)
#View(raw_CN1_sal)
spec(raw_CN1_temp)
#View(raw_CN1_temp)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN1_sal$datetime <- as.POSIXct(raw_CN1_sal$TIMESTAMP, "%Y/%m/%d %I:%M:%S %p", tz = "")
raw_CN1_temp$datetime <- as.POSIXct(raw_CN1_temp$TIMESTAMP, "%Y/%m/%d %I:%M:%S %p", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_CN1_sal)
head(raw_CN1_temp)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_CN1_sal <- raw_CN1_sal %>% rename("salinity" = "VALUE")
raw_CN1_temp <- raw_CN1_temp  %>% rename("temp" = "VALUE")
#Store variables that we will include in the final data frame
lat <- 43.79075
lon <- -65.83619
firstyear <- 2020
finalyear <- 2021
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_CN1_sal <- raw_CN1_sal %>%
filter(between(salinity, 0, 42))
filtered_CN1_temp <- raw_CN1_temp %>%
filter(between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_CN1_sal$salinity))
print(summary(filtered_CN1_temp$temp))
#Store our data into a variable name with just the site name.
CN1_temp <- filtered_CN1_temp
CN1_sal <- filtered_CN1_sal
# we have NAs in the our salinity data frame in the datetime column - need to remove these
count.nas_sal <- is.na(CN1_sal$datetime) # store our NAs in a variable
summary(count.nas_sal) # we have 12 NAs that are stored as "TRUE" in our count.nas
nrow(CN1_sal) # figure out how many rows we have in the original df: 104905
which(count.nas_sal == TRUE) # find the number of NA rows that we need to remove: 12
CN1_sal <- CN1_sal[-c(38074, 38075, 38076, 38077, 38078, 38079,
90414, 90415, 90416, 90417, 90418, 90419), ] # remove the rows
nrow(CN1_sal) # check the new number of rows in the dataframe with the NAs removed
check <- 104905-104893 # the value of check should be 12
check # cool, we removed the 12 NA rows!
# we have NAs in the our temperature data frame in the datetime column - need to remove these
count.nas_temp <- is.na(CN1_temp$datetime) # store our NAs in a variable
summary(count.nas) # we have 12 NAs that are stored as "TRUE" in our count.nas
summary(count.nas_temp) # we have 12 NAs that are stored as "TRUE" in our count.nas
nrow(CN1_temp) # figure out how many rows we have in the original df: 104905
which(count.nas == TRUE) # find the number of NA rows that we need to remove: 12
which(count.nas_temp == TRUE) # find the number of NA rows that we need to remove: 12
CN1_sal <- CN1_sal[-c(38266, 38267, 38268, 38269, 38270, 38271), ] # remove the rows
nrow(CN1_sal) # check the new number of rows in the dataframe with the NAs removed
nrow(CN1_temp) # check the new number of rows in the dataframe with the NAs removed
CN1_temp <- CN1_temp[-c(38266, 38267, 38268, 38269, 38270, 38271), ] # remove the rows
nrow(CN1_temp) # check the new number of rows in the dataframe with the NAs removed
#Data was downloaded on 3/25/2024
#Source - https://data.novascotia.ca/Nature-and-Environment/Nova-Scotia-Water-Quality-Data-Station-Locations-M/svms-mkst
#The site was sampled continuously
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-25-2024")
source_description <- ("Nova Scotia Gov Water Quality Data")
site_name <- ("CN1") #Use site code with site number based on lat position and state
collection_type <- ("continuous")
#The file we will be working with is from Salt Bay, Canada. The ID_Site for this site is CN1.
raw_CN1_sal <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN1-raw_sal.csv")
raw_CN1_temp <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/CN1-raw_temp.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_CN1_sal)
#View(raw_CN1_sal)
spec(raw_CN1_temp)
#View(raw_CN1_temp)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_CN1_sal$datetime <- as.POSIXct(raw_CN1_sal$TIMESTAMP, "%Y/%m/%d %I:%M:%S %p", tz = "")
raw_CN1_temp$datetime <- as.POSIXct(raw_CN1_temp$TIMESTAMP, "%Y/%m/%d %I:%M:%S %p", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_CN1_sal)
head(raw_CN1_temp)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_CN1_sal <- raw_CN1_sal %>% rename("salinity" = "VALUE")
raw_CN1_temp <- raw_CN1_temp  %>% rename("temp" = "VALUE")
#Store variables that we will include in the final data frame
lat <- 43.79075
lon <- -65.83619
firstyear <- 2020
finalyear <- 2021
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_CN1_sal <- raw_CN1_sal %>%
filter(between(salinity, 0, 42))
filtered_CN1_temp <- raw_CN1_temp %>%
filter(between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_CN1_sal$salinity))
print(summary(filtered_CN1_temp$temp))
#Store our data into a variable name with just the site name.
CN1_temp <- filtered_CN1_temp
CN1_sal <- filtered_CN1_sal
# we have NAs in the our salinity data frame in the datetime column - need to remove these
count.nas_sal <- is.na(CN1_sal$datetime) # store our NAs in a variable
summary(count.nas_sal) # we have 12 NAs that are stored as "TRUE" in our count.nas
nrow(CN1_sal) # figure out how many rows we have in the original df: 104905
which(count.nas_sal == TRUE) # find the number of NA rows that we need to remove: 12
CN1_sal <- CN1_sal[-c(38074, 38075, 38076, 38077, 38078, 38079,
90414, 90415, 90416, 90417, 90418, 90419), ] # remove the rows
nrow(CN1_sal) # check the new number of rows in the dataframe with the NAs removed
check_sal <- 104905-104893 # the value of check should be 12
check_sal # cool, we removed the 12 NA rows!
# we have NAs in the our temperature data frame in the datetime column - need to remove these
count.nas_temp <- is.na(CN1_temp$datetime) # store our NAs in a variable
summary(count.nas_temp) # we have 6 NAs that are stored as "TRUE" in our count.nas
nrow(CN1_temp) # figure out how many rows we have in the original df: 56634
which(count.nas_temp == TRUE) # find the number of NA rows that we need to remove: 6
CN1_temp <- CN1_temp[-c(38266, 38267, 38268, 38269, 38270, 38271), ] # remove the rows
nrow(CN1_temp) # check the new number of rows in the dataframe with the NAs removed
check_temp <- 56634-56628 # the value of check should be 12
check_temp # cool, we removed the 6 NA rows!
salplot <- ggplot(CN1_sal, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,40) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for CN1 - Salt Bay, Canada") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(CN1_temp, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for CN1 - Salt Bay, Canada") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
CN1_envrmonth_sal <- CN1_sal %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
CN1_envrmonth_temp <- CN1_temp %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(CN1_envrmonth_sal)
print(CN1_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
CN1_envryear_sal <- CN1_sal %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
CN1_envryear_temp <- CN1_temp %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(CN1_envryear_sal)
print(CN1_envryear_temp)
print(CN1_envryear_sal)
print(CN1_envryear_temp)
timeplot <- ggplot(CN1_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for CN1 - Salt Bay, Canada") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(CN1_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for CN1 - Salt Bay, Canada") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(CN1_temp$temp)
Mean_max_temperature_C <- mean(CN1_envryear_temp$max_temp)
Mean_min_temperature_C <- mean(CN1_envryear_temp$min_temp)
Temperature_st_dev <- sd(CN1_temp$temp)
Temperature_n <- nrow(CN1_temp)
Temperature_years <- nrow(CN1_envryear_temp)
#Create a data frame to store the temperature results
CN1_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(CN1_temp)
# Write to the combined file with all sites
write.table(CN1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(CN1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/CN1_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(CN1_sal$salinity)
Mean_max_Salinity_ppt <- mean(CN1_envryear_sal$max_salinity)
Mean_min_Salinity_ppt <- mean(CN1_envryear_sal$min_salinity)
Salinity_st_dev <- sd(CN1_sal$salinity)
Salinity_n <- nrow(CN1_sal)
Salinity_years <- nrow(CN1_envryear_sal)
#Create a data frame to store the temperature results
CN1_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(CN1_salinity)
# Write to the combined file with all sites
write.table(CN1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(CN1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/CN1_salinity.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#Data was downloaded on 3/21/2024 from UMaine Loboviz
#Source - University of Maine http://maine.loboviz.com/ and http://maine.loboviz.com/cgi-lobo/lobo
#The site was sampled intermittently
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-21-2024")
source_description <- ("University of Maine")
site_name <- ("ME2") #Use site code with site number based on lat position and state
collection_type <- ("intermittent")
#The file we will be working with is from the Upper Damariscotta Estuary. The ID_Site for this site is ME2.
raw_ME2 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/ME2-raw.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_ME2)
#View(raw_ME2)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_ME2$datetime <- as.POSIXct(raw_ME2$Timestamp, "%m/%d/%y %H:%M", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
head(raw_ME2)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_ME2 <- raw_ME2 %>% rename("salinity" = "salinity")
raw_ME2 <- raw_ME2  %>% rename("temp" = "temperature")
#Store variables that we will include in the final data frame
lat <- 43.986
lon <- -69.55
firstyear <- 2015
finalyear <- 2023
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_ME2 <- raw_ME2 %>%
filter(between(salinity, 0, 42))
filtered_ME2 <- raw_ME2 %>%
filter(between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_ME2$salinity))
print(summary(filtered_ME2$temp))
#Store our data into a variable name with just the site name.
ME2 <- filtered_ME2
salplot <- ggplot(ME2, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,40) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for ME2 - Damariscotta Estuary") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
# we have NAs in the our salinity data frame in the datetime column - need to remove these
count.nas <- is.na(ME2$datetime) # store our NAs in a variable
summary(count.nas) # we have 12 NAs that are stored as "TRUE" in our count.nas
count.nas <- is.na(ME2$temp)
summary(count.nas) # no, we don't have any NAs, so we are good to go
count.nas_temp <- is.na(ME2$temp)
count.nas_temp
summary(count.nas_temp)
count.nas_sal <- is.na(ME2$salinity)
summary(count.nas_sal)
salplot <- ggplot(ME2, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,40) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for ME2 - Damariscotta Estuary") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(ME2, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for ME2 - Damariscotta Estuary") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
ME2_envrmonth_sal <- ME2 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity))
ME2_envrmonth_temp <- ME2 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(ME2_envrmonth_sal)
print(ME2_envrmonth_temp)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
ME2_envryear_sal <- ME2 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity))
ME2_envryear_temp <- ME2 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(ME2_envryear_sal)
print(ME2_envryear_temp)
timeplot <- ggplot(ME2_envrmonth_sal, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Salinity Timeplot for ME2 - Damariscotta Estuary") +
ylim(1,12) +
theme_minimal()
timeplot
timeplot <- ggplot(ME2_envrmonth_temp, aes(x = year)) +
geom_point(aes(y = month, color = length_temp), size = 4) +
labs(x = "Time", y = "Month", title = "Temperature Timeplot for ME2 - Damariscotta Estuary") +
ylim(1,12) +
theme_minimal()
timeplot
knitr::opts_chunk$set(echo = TRUE)
#Data was downloaded on 3/25/2024 from UMaine Loboviz
#Source - University of Maine http://maine.loboviz.com/ and http://maine.loboviz.com/cgi-lobo/lobo. Graphed data using the graph loboviz function and then exported all available data in the visualization.
#The site was sampled intermittently
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("03-25-2024")
source_description <- ("University of Maine")
site_name <- ("ME1") #Use site code with site number based on lat position and state
collection_type <- ("intermittent")
#The file we will be working with is from the Upper Damariscotta Estuary. The ID_Site for this site is ME1.
raw_ME1 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/ME1-raw.csv")
library("dplyr") #Used for working with data frames
library("lubridate") #Used for time-date conversions
library("readr") #Used to read the CSV file
library("ggplot2")
#The file we will be working with is from the Upper Damariscotta Estuary. The ID_Site for this site is ME1.
raw_ME1 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/ME1-raw.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_ME1)
#View(raw_ME1)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_ME1$datetime <- as.POSIXct(raw_ME1$Timestamp, "%m/%d/%y %H:%M", tz = "")
View(raw_ME1)
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_ME1$datetime <- as.POSIXct(raw_ME1$Timestamp, "%m/%d/%y %H:%M", tz = "")
