knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
#Data was downloaded on 7/7/2023
#Source - https://cdmo.baruch.sc.edu//dges/ - Selected Grand Bay, Point Aux Chenes Bay. The station code is GNDPCWQ.
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("07-11-2023")
source_description <- ("NERR Centralized Data. Grand Bay - Point Aux Chenes Bay GNDPCWQ")
site_name <- ("AL1") #Use site code with site number based on lat position and state
collection_type <- ("continuous")
#The file we will be working with is from Copano Bay, Texas. The ID_Site for this site is TX2.
raw_AL1 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/AL1-raw.csv")
library("dplyr") #Used for working with data frames
library("lubridate") #Used for time-date conversions
library("readr") #Used to read the CSV file
library("ggplot2")
#The file we will be working with is from Copano Bay, Texas. The ID_Site for this site is TX2.
raw_AL1 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/AL1-raw.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_AL1)
View(raw_AL1)
# SKIP combining, date and time of collection is already in a column together
# Use unclass to view the way that the time and date are stored
# unclass(raw_AL1$DateTimeStamp)
# The data is stored in month-day-yearXX hours(12):minutes format
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_AL1$datetime <- as.POSIXct(raw_AL1$DateTimeStamp, "%m/%d/%y %H:%M", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
summary(raw_AL1)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_AL1 <- raw_AL1 %>% rename("temp" = "Temp", "salinity" = "Sal") #No lat and long data in this file - check metadata files
#Print the range (minimum and maximum) of dates of data collection.
print(summary(raw_AL1$datetime))
#Print the range (minimum and maximum) of the salinity values.
print(summary(raw_AL1$salinity))
#Print the range (minimum and maximum) of the temperature values.
print(summary(raw_AL1$temp))
#Store variables that we will include in the final data frame. Pull metadata from metadata file in download .zip file.
lat <- 30.34860
lon <- -88.41850
firstyear <- 2005
finalyear <- 2022
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_AL1 <- raw_AL1 %>%
filter(between(salinity, 0, 40) & between(temp, 0, 42))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_AL1$salinity))
print(summary(filtered_AL1$temp))
#Store our data into a variable name with just the site name.
AL1 <- filtered_AL1
salplot <- ggplot(AL1, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,45) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for AL1 - Cedar Point Reef") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(AL1, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for AL1 - Cedar Point Reef") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
AL1_envrmonth <- AL1 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity),
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(AL1_envrmonth)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
AL1_envryear <- AL1 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(AL1_envryear)
timeplot <- ggplot(AL1_envrmonth, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Timeplot for AL1 - Cedar Point Reef") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(AL1$temp)
Mean_max_temperature_C <- mean(AL1_envryear$max_temp)
Mean_min_temperature_C <- mean(AL1_envryear$min_temp)
Temperature_st_dev <- sd(AL1$temp)
Temperature_n <- nrow(AL1)
Temperature_years <- nrow(AL1_envryear)
#Create a data frame to store the temperature results
AL1_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(AL1_temp)
# Write to the combined file with all sites
write.table(AL1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(AL1_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/AL1_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(AL1$salinity)
Mean_max_Salinity_ppt <- mean(AL1_envryear$max_salinity)
Mean_min_Salinity_ppt <- mean(AL1_envryear$min_salinity)
Salinity_st_dev <- sd(AL1$salinity)
Salinity_n <- nrow(AL1)
Salinity_years <- nrow(AL1_envryear)
#Create a data frame to store the temperature results
AL1_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(AL1_salinity)
# Write to the combined file with all sites
write.table(AL1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(AL1_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/AL1_salinity.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData")
library("dplyr") #Used for working with data frames
library("lubridate") #Used for time-date conversions
library("readr") #Used to read the CSV file
library("ggplot2")
#Data was downloaded on 7/7/2023
#Source - https://cdmo.baruch.sc.edu//dges/ - Selected Mission Aransas, Copano Bay West. The station code is MARCWWQ.
#Create text strings with metadata information that we want to include in the final data frame.
download_date <- ("07-07-2023")
source_description <- ("NERR Centralized Data. Mission Aransas - Copano Bay West MARCWWQ")
site_name <- ("TX2") #Use site code with site number based on lat position and state
collection_type <- ("continuous")
#The file we will be working with is from Copano Bay, Texas. The ID_Site for this site is TX2.
raw_TX2 <- read_csv("/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/TX2-raw.csv")
# View how the data is stored. Note the variable names and the format and units that the data are stored in.
spec(raw_TX2)
View(raw_TX2)
# SKIP combining, date and time of collection is already in a column together
# combined_datetime <- paste(raw_SC2$collection_date, raw_SC2$collection_time)
# Use unclass to view the way that the time and date are stored
# unclass(raw_TX2$DateTimeStamp)
# The data is stored in month-day-yearXX hours(12):minutes format
#Convert to POSIXct format. Store it into a column named datetime in the data frame.
raw_TX2$datetime <- as.POSIXct(raw_TX2$DateTimeStamp, "%m/%d/%y %H:%M", tz = "")
#Print the new data frame and examine to make sure the new datetime column is in the correct format.
summary(raw_TX2)
#Standardize column and variable names. We will use "temp" for temperature in degrees C, "salinity" for salinity in parts per thousand (ppt), "lat" for latitude in degrees, and "lon" for longitude in degrees.
#Use the dyplr format to rename multiple columns in the format "dataframe %>% rename("new name 1" = "old name 1", "new name 2", "old name 2")
raw_TX2 <- raw_TX2 %>% rename("temp" = "Temp", "salinity" = "Sal") #No lat and long data in this file - check metadata files
#Print the range (minimum and maximum) of dates of data collection.
print(range(raw_TX2$DateTimeStamp))
#Print the range (minimum and maximum) of the salinity values.
print(summary(raw_TX2$salinity))
#Print the range (minimum and maximum) of the temperature values.
print(summary(raw_TX2$temp))
#Store variables that we will include in the final data frame
lat <- 28.08410
lon <- -97.20090
firstyear <- 2008
finalyear <- 2021
#Filter the data between the values of 0 and 40 for both salinity and temperature.
filtered_TX2 <- raw_TX2 %>%
filter(between(salinity, 0, 44) & between(temp, 0, 40))
# Sanity check - print the ranges to ensure values are filtered properly. We can see that the ranges for both are now in the appropriate range.
print(summary(filtered_TX2$salinity))
print(summary(filtered_TX2$temp))
#Store our data into a variable name with just the site name.
TX2 <- filtered_TX2
salplot <- ggplot(TX2, aes(x = datetime)) +
geom_line(aes(y = salinity, color = "Salinity (ppt)")) +
ylim(0,45) +
labs(x = "Time", y = "Salinity ppt", title = "Salinity Plot for TX2 - Copano Bay") +
scale_color_manual(values = c("Salinity (ppt)" = "blue")) +
theme_minimal()
salplot
tempplot <- ggplot(TX2, aes(x = datetime)) +
geom_line(aes(y = temp, color = "Temperature (C)")) +
ylim(0, 45) +
labs(x = "Time", y = "Temperature C", title = "Temperature Plot for TX2 - Copano Bay") +
scale_color_manual(values = c( "Temperature (C)" = "red")) +
theme_minimal()
tempplot
#Calculate the mean, maximum, and minimum values for salinity and temperature for each month.
TX2_envrmonth <- TX2 %>%
mutate(year = year(datetime), month = month(datetime)) %>%
group_by(year, month) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
length_salinity = length(salinity),
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp),
length_temp = length(temp))
print(TX2_envrmonth)
#Calculate the mean, maximum, and minimum values for salinity and temperature for each year.
TX2_envryear <- TX2 %>%
mutate(year = year(datetime)) %>%
group_by(year) %>%
summarise(
min_salinity = min(salinity),
max_salinity = max(salinity),
mean_salinity = mean(salinity),
min_temp = min(temp),
max_temp = max(temp),
mean_temp = mean(temp))
print(TX2_envryear)
timeplot <- ggplot(TX2_envrmonth, aes(x = year)) +
geom_point(aes(y = month, color = length_salinity), size = 4) +
labs(x = "Time", y = "Month", title = "Timeplot for TX2 - Copano Bay") +
ylim(1,12) +
theme_minimal()
timeplot
#Calculate temperature variables.
Mean_Annual_Temperature_C <- mean(TX2$temp)
Mean_max_temperature_C <- mean(TX2_envryear$max_temp)
Mean_min_temperature_C <- mean(TX2_envryear$min_temp)
Temperature_st_dev <- sd(TX2$temp)
Temperature_n <- nrow(TX2)
Temperature_years <- nrow(TX2_envryear)
#Create a data frame to store the temperature results
TX2_temp <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Temperature_C, Mean_max_temperature_C, Mean_min_temperature_C, Temperature_st_dev, Temperature_n, Temperature_years, collection_type)
print(TX2_temp)
# Write to the combined file with all sites
write.table(TX2_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_temperature.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(TX2_temp, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/TX2_temperature.csv")
#Calculate the salinity variables
Mean_Annual_Salinity_ppt <- mean(TX2$salinity)
Mean_max_Salinity_ppt <- mean(TX2_envryear$max_salinity)
Mean_min_Salinity_ppt <- mean(TX2_envryear$min_salinity)
Salinity_st_dev <- sd(TX2$salinity)
Salinity_n <- nrow(TX2)
Salinity_years <- nrow(TX2_envryear)
#Create a data frame to store the temperature results
TX2_salinity <- cbind(site_name, download_date, source_description, lat, lon, firstyear, finalyear, Mean_Annual_Salinity_ppt, Mean_max_Salinity_ppt, Mean_min_Salinity_ppt, Salinity_st_dev, Salinity_n, Salinity_years, collection_type)
print(TX2_salinity)
# Write to the combined file with all sites
write.table(TX2_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/seascape_salinity.csv", sep = ",", append = TRUE, col.names = FALSE, row.names = FALSE) # The column names should be changed to FALSE after 1st row is added to the data frame
# Write to a unique new CSV file
write.csv(TX2_salinity, "/Users/madelineeppley/GitHub/EasternOysterEnvData/2022_SiteEnvironmentData/Seascape_Processed/TX2_salinity.csv")
